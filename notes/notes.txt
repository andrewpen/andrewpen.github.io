Open Browser (localhost, github)
Open VSCode
On Windows, using Terminal from VSCode footer (Mac uses Terminal outside VSCode) 
mongodb-windows-x86_64-4.4.4-signed


**First Run Mongod.exe**
Then start mongo.exe
**Starting Up Mongo.exe**
C:\Program Files\MongoDB\Server\4.4\bin>mongo.exe
MongoDB shell version v4.4.4
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("84777495-a396-4568-90b1-367c6290eb65") }
MongoDB server version: 4.4.4
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
        https://docs.mongodb.com/
Questions? Try the MongoDB Developer Community Forums
        https://community.mongodb.com
---
The server generated these startup warnings when booting:
        2021-03-16T21:34:38.818-05:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
        2021-03-16T21:34:38.818-05:00: This server is bound to localhost. Remote systems will be unable to connect to this server. Start the server with --bind_ip <address> to specify which IP addresses it should serve responses from, or with --bind_ip_all to bind to all interfaces. If this behavior is desired, start the server with --bind_ip 127.0.0.1 to disable this warning
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---

Requirements:
1) Links 
        Group
        Sort by 
2) To-do list 
        Properties
                - Date added 
                - Date due (defaults to today)
                - Priority 
                - Name 
                - Description
                - Add to (Tagging)
                        Project 
                        One on one 
                        Meeting 
3) Notes
        Categories/Notebooks (model evernote)
                Daily
                One on ones
                Team meetings
                Mentor meetings 
                Dev lead meeting 
                Project meeting 
                Thoughts
                Reviews
                Scratchpad/General notes 
        Tagging functionality that I can use to pull together like topics
        Date created, date modified added automatically
4) Projects
        Views
                - Table 
                        Sort capability
                        Selectable - Displays detail view 
                - Kanban (view all projects)
                - Gantt (view all projects) 
                - Kanban (within single project)
                - Gantt (within single project)
        Properties
                - Project name 
                - Date added 
                - Date modified
                - Date completed
                - Priority (1,2,3)
                - Urgency (1,2,3)
5) Calendar 
        Display to-dos and projects  
        Look ahead to meetings for the week and create to-dos associated with them 
        Look back on meetings for the week and create to-dos or necessary documentation

Templates
        - Daily Notes
        - One on ones 
        - Projects 
        - Stories to tell 
                Based on time allotted - what needs to be present and how much detail is necessary   
                        - 30 sec pitch 
                        - 5 min 
                        - 15 min
                        - 30 min 
                        - 1 hour
        

What is it that you want?
Make it trackable - you need to be able to see the finishline.
Why do you want to achieve that goal?
Find who has achieved this before and model them.
Determine what needs to be done - the tasks and milestones that will get you there.
What is the date you want to achieve this by? Needs a deadline - end date.
What routines will get you there - schedule and action 
Reflection time once a week to say how did I do, what needs to change, what needs to continue 


List feeds
		Allow search within all feeds but only return node name and feed
		Query a feed property json and only show feeds that uswins are tagged to
			This enables only certain users to be able to use the CaaS Navigator and only for certain feeds
	Select a feed - choice of views
		Detail view - show the node titles
				Add button to view feed node in browser (json view)
				Don't limit node titles (scrollable through all)
				Allow search within titles (but not details)
				Display detail view as a left side column
			Select a node title - show the node details
			Ability to add new node and fill in node details
		Complete view - show all feed as table rows
				Add button to view feed in browser (json view)
				Limit number of rows in view, show pagination
				Allow search within the feed
				Allow full screen view which hides nav columns
			Select individual fields to edit
			Ability to append to feed by importing or adding a new row



FED Project Approach 
Approach
- Treat internal FED projects like any other product:
        - Product backlog (artifact)
                - What projects do we want to work on?
                - Are projects organized by priority?
        - Backlog grooming (ritual)
                - Are project requirements defined?
                - Are requirements ready to be assigned out?
        - Sprint planning (ritual)
                - Product owner (managers) presents the requirements to the development team (developers working on internal projects).
                - Development team determines how much work they can deliver in a sprint (one week?), and share how they will satisfy the requirements.
                - Product owners and development team align on sprint plan.
        - Sprint review (ritual)
                - Development team share the product increment.
                - Product owners accept / reject the product increment. Rejected requirements get added to the product backlog and reprioritized.

Next steps
- Align with managers on approach.
- Define roles and responsibilities.
        - Who are the product owners (i.e. who will write the requirements, who will present the requirements to the development team, who will answer the development team’s questions, who will accept / reject requirements).
        - Who is the development team (i.e. who will build the product increment, who will say how much they can deliver in a sprint, who will come up with the plan for how the requirements will be solved, who will share the product increment with the product owners).
- Create the product backlog: https://docs.google.com/spreadsheets/d/16uCyeUbyXtnscn9SsNUiBAv0wIW0iLBv5nJCt7UdBos/edit?usp=sharing 
- Schedule first grooming meeting among product owners.
- Onboard the development team.
- Schedule the first set of rituals when the first set of requirements have been fully groomed and are ready to share with the development team during the Sprint Planning meeting.


Target storyline 

Problem statement:
        Slow ideation, no one knows where to start
        Slow development of custom solutions
        Slow audience creation and ramp up
        Analysis and measurement open to extreme skepticism 
        More time spent doing rework
        This is why resources need to be dedicated - we don’t have enough resources to dedicate
Potential impact:
        Provides a fast lineup of ideas
        Requires little development
        Eliminates audience creation and ramp up time
        Delivers more reliable readouts 
        Less time spent doing rework
        Eliminates the need for dedicated resources while providing more overall value through our testing
Don’t know what ideas to act on
Don’t know what placements can be tested
Don’t know what kind of tests can be done
Don’t know what audiences are available to them
Don’t know what tests are already being run
Requirements are complex, confusing, hardly ever right

Custom campaign
Ideation - Time spent coming up with random, untested ideas
Requirements - Time spent cleaning requirements
Development - custom development from the ground up
Audience Building - Sizing and creation
Testing - Onboard UAT, mostly manual
Analysis - Great deal of swirl on validating and verifying data, data sources, code, requirements
Scaling - This is normally never looked at until after it is determined to scale, which is months out from execution if GTS is needed

Templated campaign 
Ideation - Pick from ready to go options
Requirements - 80% complete
Development - 80% complete
Audience Building - Premade Audiences
Testing - Automated
Analysis - Higher quality less error
Scaling - Accounted for up front

Action: 
Audit pages where we can plug in XFs
Audit pages where we can use atomic components
Identify common elements used in campaigns and proactively convert to XFs

Wes framework for RTM
1) Idea & Hypothesis
2) Requirements
3) Assets
4) Build & Test - 1.5 days
Input - Implementation Requirements (?? Merch) & Assets (140) 
Output - Test live in production (Target)
5) Deploy & Measure
6) Scale & Maintain
